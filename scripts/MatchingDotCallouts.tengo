/*
Tengo Language
Checks that dot callouts (<.>) are matching 
$ tengo MatchingDotCallouts.tengo <asciidoc_file_to_validate>
*/

fmt := import("fmt")
os := import("os")
text := import("text")

input := os.args()
scope := os.read_file(input[2])
matches := []

//trim extra whitespace
scope = text.trim_space(scope)
//add a newline, it might be missing
scope += "\n"

num_codeblock_callouts := 0
num_callouts := 0
codeblock_callout_regex := ".+<(\\.)>"
callout_regex := "^<(\\.)>"

for line in text.split(scope, "\n") {
  if text.re_match(codeblock_callout_regex, line) {
    //restart for new listingblock
    num_callouts = 0
    //account for lines with multiple callouts
    num_callouts_in_line := text.count(line, "<.>")
    if num_callouts_in_line > 1 {
      num_codeblock_callouts = num_codeblock_callouts + num_callouts_in_line
    } else {
      num_codeblock_callouts++
    }
  }

  if text.re_match(callout_regex, line) {
    num_callouts++
    if num_callouts > num_codeblock_callouts {
      start := text.index(scope, line)
      matches = append(matches, {begin: start, end: start + len(line)})
    }
    if num_callouts == num_codeblock_callouts {
      num_callouts = 0
      num_codeblock_callouts = 0
    }
  }
}


if len(matches) == 0 {  
  fmt.println("Dot callouts are balanced")
} else {
  fmt.println(matches) 
}
